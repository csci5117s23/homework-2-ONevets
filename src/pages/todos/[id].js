import Head from "next/head";
import { useRouter } from "next/router";
import { Inter } from "next/font/google";
import { SignedIn, SignIn } from "@clerk/nextjs";
const inter = Inter({ subsets: ["latin"] });
import styles from "../styles/to-do.module.css";
import NavBar from "../templates/navbar";
import AddModal from "../templates/addmodal";
import EditModal from "../templates/editmodal";
import { useEffect, useState, componentDidMount } from "react";

export default function Todos({ Component, pageProps }) {
  const router = useRouter();
  const taskId = router.query;
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uniqueCategories, setUniqueCategories] = useState([]);
  const [onHomePage, setOnHomePage] = useState(true);
  const [taskToEdit, setTaskToEdit] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);

  async function removeTask(taskId) {
    const response = await fetch(
      process.env.NEXT_PUBLIC_DB_API_ENDPOINT + "/toDo/" + taskId,
      {
        method: "DELETE",
        headers: { "x-apikey": process.env.NEXT_PUBLIC_DB_API_KEY },
      }
    ).then((res) => res);
    getTasks();
  }

  async function filterCategories(category) {
    const response = await fetch(
      process.env.NEXT_PUBLIC_DB_API_ENDPOINT + "/toDo/category/" + category,
      {
        method: "GET",
        headers: { "x-apikey": process.env.NEXT_PUBLIC_DB_API_KEY },
      }
    );
    const data = await response.json();
    // update state -- configured earlier.
    setTasks(data);
    setLoading(false);
  }

  async function completeTask(task) {
    const response = await fetch(
      process.env.NEXT_PUBLIC_DB_API_ENDPOINT + "/toDo/" + task._id,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "x-apikey": process.env.NEXT_PUBLIC_DB_API_KEY,
        },
        body: JSON.stringify({
          _id: task._id,
          ownerId: task.ownerId,
          title: task.title,
          description: task.description,
          category: task.category,
          completed: !task.completed,
        }),
      }
    );
  }

  const getTask = async (taskId) => {
    const response = await fetch(
      process.env.NEXT_PUBLIC_DB_API_ENDPOINT + "/toDo/" + taskId,
      {
        method: "GET",
        headers: { "x-apikey": process.env.NEXT_PUBLIC_DB_API_KEY },
      }
    );
    const data = await response.json();
    setTaskToEdit(data);
    setModalOpen(true);
    console.log(taskToEdit);
  };

  useEffect(() => {
    getTask(taskId);
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  } else {
    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <NavBar
          getTasks={getTasks}
          tasks={tasks}
          setTasks={setTasks}
          loading={loading}
          setLoading={setLoading}
          setOnHomePage={setOnHomePage}
        ></NavBar>
        <div className={`${styles.maxheight} container-fluid text-center`}>
        <form id="editForm" onSubmit={(e) => handleSubmit(e)}>
              <div className="modal-header">
                <h1 className="modal-title fs-5" id="editModalLabel">
                  Edit a reminder
                </h1>
                <button
                  type="button"
                  className="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                ></button>
              </div>

              <div className="modal-body">
                <div className="mb-3">
                  <label htmlFor="title" className="form-label">
                    Title
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    id="title"
                    name="title"
                    aria-describedby="title"
                    defaultValue={props.taskToEdit.title}
                    onChange={(e) => setTitle(e.target.value)}
                  ></input>
                </div>
                <div className="mb-3">
                  <label htmlFor="description" className="form-label">
                    Details
                  </label>
                  <textarea
                    type="text"
                    className="form-control"
                    id="description"
                    defaultValue={props.taskToEdit.description}
                    onChange={(e) => setDescription(e.target.value)}
                  ></textarea>
                </div>

                <div className="mb-3">
                  <input
                    type="checkbox"
                    onChange={() => setWantCategory(!wantCategory)}
                    checked={wantCategory}
                  ></input>
                  <label className="form-label">Create new category?</label>
                  <br></br>
                  {handleCategory()}
                </div>
              </div>

              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-secondary"
                  data-bs-dismiss="modal"
                  onClick={(e) => handleCancel(e)}
                >
                  Cancel
                </button>
                <button
                  data-bs-dismiss="modal"
                  aria-label="Close"
                  type="submit"
                  className="btn btn-primary"
                  onClick={() => props.setModalOpen(false)}
                >
                  Save
                </button>
              </div>
            </form>
        </div>
      </>
    );
  }
}
