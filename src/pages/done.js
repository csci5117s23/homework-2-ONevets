import Head from "next/head";
import { Inter } from "next/font/google";
const inter = Inter({ subsets: ["latin"] });
import styles from "../styles/to-do.module.css";
import NavBar from "../components/navbar";
import AddModal from "../components/addmodal";
import { useEffect, useState } from "react";
import Link from "next/link";
import { useAuth } from "@clerk/nextjs";
import * as db from "../modules/Data";

export default function Done() {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uniqueCategories, setUniqueCategories] = useState([]);
  const { isLoaded, userId, sessionId, getToken } = useAuth();

  async function removeTask(taskId) {
    const token = await getToken({template: "codehooks"});
    const removeTaskVar = await db.removeTask(token, taskId); 
    getTasks();
  }

  async function filterCategories(category) {
    const token = await getToken({template: "codehooks"});
    const filterCategoriesVar = await db.filterCategories(token, category);
    setTasks(filterCategoriesVar);
  }

  async function completeTask(task) {
    const token = await getToken({template: "codehooks"});
    const completeTaskVar = await db.completeTask(token, task)
  }

  function getUniqueCategories(arr) {
    let newArr = [];
    arr.forEach((item) => {
      newArr.push(item.category);
    });
    const setData = new Set(newArr);
    setUniqueCategories(Array.from(setData));
  }

  const getTasks = async () => {
    const token = await getToken({template: "codehooks"});
    const getTasksVar = await db.getTasksDone(token);
    
    setTasks(getTasksVar);
    setLoading(false);
  };

  useEffect(() => {
    getTasks();
  }, []);

  useEffect(() => {
    getUniqueCategories(tasks);
  }, [loading, tasks.length, uniqueCategories.length]);

  if (loading) {
    return <div>Loading...</div>;
  } else {
    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <NavBar></NavBar>
        <div className={`${styles.maxheight} container-fluid text-center`}>
          <div className={`${styles.maxheight} row`}>
            <div className={`${styles.leftmenu} col`}>
              {/* This is a template */}
              <h1>Categories</h1>
              <h2 class={styles.category} onClick={getTasks}>Reset</h2>
              {
                uniqueCategories.map((task, key) => {
                  return (
                    <>
                      <p class={styles.category} onClick={() => filterCategories(task)}>{task}</p>
                    </>
                  );
                })
              }
            </div>
            <div className={`${styles.rightmenu} col-9`}>
              <h1>Tasks</h1>
              {/* This is a template */}
              {tasks.map((task) => {
                return (
                  <>
                    <div className="container">
                      <h2>{task.title}</h2>
                      <h3>Category: {task.category}</h3>
                      <p>{task.description}</p>
                      <input
                        type="checkbox"
                        id="completedCheckbox"
                        name="completed"
                        defaultChecked={task.completed}
                        onChange={(e) => completeTask(task)}
                      ></input>
                      <label htmlFor="completedCheckbox">
                        {" "}
                        Check to complete
                      </label>
                      <br></br>
                      <Link
                        href={{
                          pathname: `todos/[id]`,
                          query: {
                            id: task._id
                          }
                        }}
                      >
                        Edit
                      </Link>
                      <button
                        className={`btn btn-primary`}
                        type="button"
                        onClick={(e) => removeTask(task._id)}
                      >
                        Remove
                      </button>
                    </div>
                    <hr></hr>
                  </>
                );
              })}
            </div>
            <button
              className={`${styles.addToDo} btn btn-primary`}
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#addModal"
            >
              +
            </button>
            <AddModal
              uniqueCategories={uniqueCategories}
              parentTasks={tasks}
              getTasks={getTasks}
            ></AddModal>
          </div>
        </div>
      </>
    );
  }
}
